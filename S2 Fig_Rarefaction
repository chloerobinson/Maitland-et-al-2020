#Chloe Robinson, Feb 25 2020

library(stringr) # str_split
library(reshape2) # dcast
library(vegan) # rarecurve
library(purrr) # for map_dfr
library(ggplot2) # ggplot
library(scales) # comma
library(gridExtra) # grid.arrange
library(cowplot) # get_legend

###################################################################
# Edit rarecurve function to remove the horizontal lines
###################################################################

rarecurve2 <- function (x, step = 1, sample, xlab = "Sample Size", ylab = "Species", 
                        label = TRUE, col, lty, ...) 
{
  x <- as.matrix(x)
  if (!identical(all.equal(x, round(x)), TRUE)) 
    stop("function accepts only integers (counts)")
  if (missing(col)) 
    col <- par("col")
  if (missing(lty)) 
    lty <- par("lty")
  tot <- rowSums(x)
  S <- specnumber(x)
  if (any(S <= 0)) {
    message("empty rows removed")
    x <- x[S > 0, , drop = FALSE]
    tot <- tot[S > 0]
    S <- S[S > 0]
  }
  nr <- nrow(x)
  col <- rep(col, length.out = nr)
  lty <- rep(lty, length.out = nr)
  out <- lapply(seq_len(nr), function(i) {
    n <- seq(1, tot[i], by = step)
    if (n[length(n)] != tot[i]) 
      n <- c(n, tot[i])
    drop(rarefy(x[i, ], n))
  })
  Nmax <- sapply(out, function(x) max(attr(x, "Subsample")))
  Smax <- sapply(out, max)
  plot(c(1, max(Nmax)), c(1, max(Smax)), xlab = xlab, ylab = ylab, 
       type = "n", ...)
  if (!missing(sample)) {
    abline(v = sample) 
    rare <- sapply(out, function(z) approx(x = attr(z, "Subsample"), 
                                           y = z, xout = sample, rule = 1)$y)
    #    abline(h = rare, lwd = 0.5) #turn off horizontal lines
  }
  for (ln in seq_along(out)) {
    N <- attr(out[[ln]], "Subsample")
    lines(N, out[[ln]], col = col[ln], lty = lty[ln], ...)
  }
  if (label) { 
    ordilabel(cbind(tot, S), labels = rownames(x), ...)
  }
  invisible(out)
}

#####################################################################

# Read in cat.csv
a <- read.table("rdp.csv", header = TRUE, sep = ",",stringsAsFactors = FALSE)
head(a)

# Create dataframes for vegan
# Split up SampleName with pkg 'stringr'
a.1<-data.frame(a, do.call(rbind, str_split(a$SampleName,"_")), stringsAsFactors = FALSE)
head(a.1)
names(a.1)[32:36]<- c("Name","Diatom","Site","Method","Replicate","Status")
head(a.1)

# pivot to make esv matrix (pool across verions, keep only substrate + sites separate)
A.2.esv<-reshape2::dcast(a.1, SampleName ~ rbcL_GlobalESV, value.var = "ESVsize", fun.aggregate = sum)

# move sample to rownames then delete
rownames(A.2.esv) <- A.2.esv$SampleName
A.2.esv$SampleName <- NULL

#remove columns with only zeros
esv.notnull<-A.2.esv[,colSums(A.2.esv) !=0]

#remove rows with only zeros & edit rownames
esv.notnull2<-esv.notnull[rowSums(esv.notnull) !=0,]

# Exclude controls before doing rarefaction
#esv.notnull2.2 <- esv.notnull2[-c(3,6,9)]

#calculate 15th percentile for rrarefy function
esv.percentile<-quantile(rowSums(esv.notnull2), prob=0.15)
esv.percentile
# 15% 
# 38584.2

# set random seed
set.seed(1234)

# Do rarefection with pkg 'vegan'
rarecurveout <- rarecurve2(esv.notnull2, 
                           sample=esv.percentile, 
                           step=500, 
                           label=T)

# Reformat vegan list as df (cols OTU, raw.read)
rare.df <- lapply(rarecurveout, function(x){
  b <- as.data.frame(x)
  b <- data.frame(OTU = b[,1], raw.read = rownames(b))
  b$raw.read <- as.numeric(gsub("N", "",  b$raw.read))
  return(b)
})

# Add sample names to vegan output (df) (rownames)
sample_names <- rownames(esv.notnull2)
names(rare.df) <- sample_names

# Map rownames to vegan output (df)
rare.df <- map_dfr(rare.df, function(x){
  z <- data.frame(x)
  return(z)
}, .id = "sample")

# Parse out metadata from sample
rare.df <- data.frame(rare.df, do.call(rbind, str_split(rare.df$sample,"_")), stringsAsFactors = FALSE)
names(rare.df)[4:9]<-c("Name","Diatom","Site","Method","Replicate","Status")

rare.df$Site <- factor(rare.df$Site, 
                       levels = c("B18", "C12", "C15","L07"),
                       labels = c("Beaver18", "Clair12", "Clair15","Laurel7"))
rare.df$Method <- factor(rare.df$Method, 
                            levels = c("K", "M", "L", "R","S"),
                            labels = c("Kick-net", "Macrophyte", "Leaf Litter", "Rock","Sediment"))
rare.df$Replicate <- factor(rare.df$Replicate, 
                         levels = c("1", "2", "3"),
                         labels = c("Replicate 1", "Replicate 2", "Replicate 3"))
rare.df$Status <- factor(rare.df$Status, 
                         levels = c("F", "G"),
                         labels = c("Fair", "Good"))
# color by site
p1.tmp <- ggplot(data = rare.df) +
  ggtitle("All taxa ~ Site") +
  labs(x="Reads", y="ESVs") +
  geom_point(aes(x = raw.read, y = OTU, color = Site), size=0.1) +
  geom_vline(xintercept = esv.percentile, linetype = "dashed") +
  scale_x_continuous(label = comma) +
  theme_bw() + 
  theme(panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        plot.title = element_text(size=10),
        legend.title = element_blank())+
  guides(color=guide_legend(override.aes = list(size = 2))) 

l1 <- get_legend(p1.tmp)

p1 <- ggplot(data = rare.df) +
  ggtitle("All taxa ~ Site") +
  labs(x="Reads", y="ESVs") +
  geom_point(aes(x = raw.read, y = OTU, color = Site), size=0.1) +
  geom_vline(xintercept = esv.percentile, linetype = "dashed") +
  scale_x_continuous(label = comma) +
  theme_bw() + 
  theme(panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        plot.title = element_text(size=10),
        legend.title = element_blank(),
        legend.position = "none")

# color by method
p2.tmp <- ggplot(data = rare.df) +
  ggtitle("All taxa ~ Method") +
  labs(x="Reads", y="ESVs") +
  geom_point(aes(x = raw.read, y = OTU, color = Method), size=0.1) +
  geom_vline(xintercept = esv.percentile, linetype = "dashed") +
  scale_x_continuous(label = comma) +
  theme_bw() + 
  theme(panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        plot.title = element_text(size=10),
        legend.title = element_blank()) +
  guides(color=guide_legend(override.aes = list(size = 2))) 

l2 <- get_legend(p2.tmp)

p2 <- ggplot(data = rare.df) +
  ggtitle("All taxa ~ Method") +
  labs(x="Reads", y="ESVs") +
  geom_point(aes(x = raw.read, y = OTU, color = Method), size=0.1) +
  geom_vline(xintercept = esv.percentile, linetype = "dashed") +
  scale_x_continuous(label = comma) +
  theme_bw() + 
  theme(panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black"),
        plot.title = element_text(size=10),
        legend.title = element_blank(),
        legend.position = "none")


g <- plot_grid(p1, p2, l1, l2, ncol = 2, rel_heights = c(1, 1, .5))
g
ggsave("rarefaction.pdf", g)
# vertical line represents 15% percentile of read depth across sample (excluding controls)
